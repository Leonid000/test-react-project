{"version":3,"file":"static/js/905.7abf184f.chunk.js","mappings":"8JACA,MAAkC,iCAAlC,EAA6E,yBAA7E,EAA+G,wBAA/G,EAAgJ,wBAAhJ,EAAwN,0BAAxN,EAA4P,yBAA5P,EAAoS,8BAApS,EAA6U,0BAA7U,EAAgX,wB,6BCO1WA,EAAa,SAACC,GAChB,OACGC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAACC,GAAE,YAAAC,OAAcJ,EAAMK,IAAKC,UAC/BL,EAAAA,EAAAA,KAAA,OAAKM,UAAWC,EAASF,SACpBN,EAAMS,QAIvB,EACMC,EAAU,SAACV,GACb,OACIC,EAAAA,EAAAA,KAAA,OAAKM,UAAWC,EAAUF,SACrBN,EAAMW,SAGnB,EAEMC,EAAW,SAACZ,GACd,IAAMa,GAAeC,EAAAA,EAAAA,UAYrB,OACIC,EAAAA,EAAAA,MAAA,OAAAT,SAAA,EACIL,EAAAA,EAAAA,KAAA,YAAUe,SAZS,WACvB,IAAIC,EAAOJ,EAAaK,QAAQC,MAChCnB,EAAMoB,qBAAqBH,EAG/B,EAOgDI,IAAKR,EAAcN,UAAWC,EAAYW,MAAOnB,EAAMsB,oBAC/FrB,EAAAA,EAAAA,KAAA,UAAQsB,QAPA,WACbvB,EAAMwB,mBACT,EAKkCjB,UAAWC,EAASF,SAAC,6DAG3D,EAwCA,EAtCgB,SAACN,GAGb,IAAIyB,EAAkBzB,EAAM0B,WAAWC,QAAQC,KAAI,SAASC,GACxD,OAAQ5B,EAAAA,EAAAA,KAACF,EAAU,CAACM,GAAIwB,EAAKxB,GAAII,KAAMoB,EAAKpB,MAChD,IAEIqB,EAAmB9B,EAAM0B,WAAWK,SAASH,KAAI,SAASC,GAC1D,OAAQ5B,EAAAA,EAAAA,KAACS,EAAO,CAACsB,OAAQH,EAAKG,OAAQrB,QAASkB,EAAKlB,SACxD,IAEIsB,GAAiBnB,EAAAA,EAAAA,UAQrB,OACIC,EAAAA,EAAAA,MAAA,OAAKR,UAAWC,EAAkBF,SAAA,EAC9BL,EAAAA,EAAAA,KAAA,OAAKoB,IAAKY,EAAgB1B,UAAS,GAAAH,OAAKI,EAAS,KAAAJ,OAAII,GAAWF,SAC5DmB,KAEJxB,EAAAA,EAAAA,KAAA,OAAKM,UAAWC,EAAWF,SACtBwB,KAEL7B,EAAAA,EAAAA,KAAA,OAAKM,UAAWC,EAAeF,UAC3BL,EAAAA,EAAAA,KAACW,EAAQ,CACLY,kBAAmBxB,EAAMwB,kBACzBJ,qBAAsBpB,EAAMoB,qBAC5BE,iBAAkBtB,EAAM0B,WAAWJ,uBAKvD,E,oBC7CA,GANyBY,E,QAAAA,KACrBC,EAAAA,EAAAA,KA1BgB,SAACC,GACjB,MAAO,CACHV,WAAYU,EAAMV,WAG1B,IAEuB,SAACW,GACpB,MAAO,CACHb,kBAAmB,WACfa,EAAS,CACLC,KAAM,eAEd,EACAlB,qBAAsB,SAACH,GACnBoB,EAAS,CACLC,KAAM,iBACNrB,KAAMA,GAEd,EAER,IAMIsB,EAAAA,EAFqBL,CAGvBM,E","sources":["webpack://test_project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialogs.jsx","components/Dialogs/DIalogs-Container.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs_wrapper\":\"Dialogs_dialogs_wrapper__fvNCW\",\"dialogs\":\"Dialogs_dialogs__Z6jYz\",\"active\":\"Dialogs_active__8m93z\",\"dialog\":\"Dialogs_dialog__zJQHa\",\"d_active\":\"Dialogs_d_active__qCBv+\",\"messages\":\"Dialogs_messages__6z7VA\",\"message\":\"Dialogs_message__Stw0q\",\"div_textarea\":\"Dialogs_div_textarea__2Dm+E\",\"textarea\":\"Dialogs_textarea__qeiqa\",\"button\":\"Dialogs_button__vRd2I\"};","\r\nimport s from './Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\nimport React, {useRef} from 'react'\r\nimport { Navigate } from 'react-router-dom';\r\n\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n       <NavLink to={`/dialogs/${props.id}`}>\r\n            <div className={s.dialog}>\r\n                {props.name}\r\n            </div>\r\n        </NavLink> \r\n    )\r\n}\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Textarea = (props) => {\r\n    const textareaItem = useRef()\r\n\r\n    const sendTextareaUpdate = () => {\r\n        let text = textareaItem.current.value\r\n        props.updateMessageWrapper(text)\r\n        \r\n\r\n    }\r\n    const addText = () =>  {\r\n       props.addMessageWrapper()\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <textarea onChange={sendTextareaUpdate} ref={textareaItem} className={s.textarea} value={props.textareaMessages}></textarea>\r\n            <button onClick={addText} className={s.button}>Отправить</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n    \r\n    \r\n    let dialogsElements = props.dialogPage.dialogs.map(function(item){\r\n        return (<DialogItem id={item.id} name={item.name} />)\r\n    })\r\n\r\n    let messagesElements = props.dialogPage.messages.map(function(item){\r\n        return  <Message sideId={item.sideId} message={item.message} />\r\n    })\r\n    /////////////..........................................................\r\n    let dialogsElement = useRef()\r\n    let dialogsElementFuncPlus = () => {\r\n        dialogsElement.current.className = 'Dialogs_dialogs__oJo4z Dialogs_active__KU5G8'\r\n    }   \r\n    let dialogsElementFuncMinus = () => {\r\n        dialogsElement.current.className = 'Dialogs_dialogs__oJo4z'\r\n    } \r\n    ////// Достаю элемент и пытаюсь поменять класс при событии\r\n    return (\r\n        <div className={s.dialogs_wrapper}>\r\n            <div ref={dialogsElement} className={`${s.dialogs} ${s.active}`}>\r\n               {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <div className={s.div_textarea}>\r\n                <Textarea\r\n                    addMessageWrapper={props.addMessageWrapper}\r\n                    updateMessageWrapper={props.updateMessageWrapper}\r\n                    textareaMessages={props.dialogPage.textareaMessages}\r\n                 />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n","import Dialogs from \"./Dialogs\"\r\nimport {connect} from 'react-redux'\r\nimport { RequireAuth_Hoc_Creator } from \"../../hoc/RequireAuth\"\r\nimport { compose } from \"redux\"\r\n\r\n\r\nconst state_props = (state) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        \r\n    }\r\n}\r\n\r\nconst dispatch_props = (dispatch) => {\r\n    return {\r\n        addMessageWrapper: () => {\r\n            dispatch({\r\n                type: 'ADD-MESSAGE'\r\n            })\r\n        },\r\n        updateMessageWrapper: (text) => {\r\n            dispatch({\r\n                type: 'UPDATE-MESSAGE',\r\n                text: text\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst DialogsContainer = compose(\r\n    connect(state_props,dispatch_props),\r\n    RequireAuth_Hoc_Creator\r\n)(Dialogs)\r\n\r\n\r\nexport default DialogsContainer;\r\n"],"names":["DialogItem","props","_jsx","NavLink","to","concat","id","children","className","s","name","Message","message","Textarea","textareaItem","useRef","_jsxs","onChange","text","current","value","updateMessageWrapper","ref","textareaMessages","onClick","addMessageWrapper","dialogsElements","dialogPage","dialogs","map","item","messagesElements","messages","sideId","dialogsElement","compose","connect","state","dispatch","type","RequireAuth_Hoc_Creator","Dialogs"],"sourceRoot":""}